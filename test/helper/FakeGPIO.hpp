#pragma once
#include "zmqpp/zmqpp.hpp"

/**
* A test helper class that emulate a GPIO pin.
* It doesn't support the full command set.
*/
class FakeGPIO
{
public:
    FakeGPIO(zmqpp::context &ctx, const std::string &name);
    FakeGPIO(const FakeGPIO &) = delete;

    /**
    * Emulate an interrupt by writing to the message bus
    */
    void interrupt();

    /**
    * if you want the GPIO in "passive" mode (ie to watch event generated BY the device), run
    * this with a zmqpp::actor.
    */
    bool run(zmqpp::socket *pipe);

private:

    // send current state to socket
    void send_state();

    void handle_cmd();

    zmqpp::context &ctx_;
    std::string name_;
    zmqpp::socket push_;

    /**
    * Receive command here.
    */
    zmqpp::socket rep_;

    bool value_;
};
